{"version":3,"sources":["../src/tinykeys.ts","index.tsx"],"names":[],"mappings":";AAgKC,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAlJD,IAAI,EAA2B,CAAC,QAAS,OAAQ,MAAO,WAMpD,EAAU,IAKV,EACkB,YAAd,oBAAA,UAAA,YAAA,EAAA,aACP,uBAAuB,KAAK,UAAU,UACnC,OACA,UAUJ,SAAS,EAAM,GACP,OAAA,EACL,OACA,MAAM,KACN,IAAI,SAAA,GACA,IAAA,EAAO,EAAM,MAAM,KACnB,EAAM,EAAK,MAER,MAAA,CADP,EAAO,EAAK,IAAI,SAAA,GAAQ,MAAQ,SAAR,EAAiB,EAAM,IACjC,KAQjB,SAAS,EAAM,EAAsB,GAE7B,QAKL,EAAM,GAAG,gBAAkB,EAAM,IAAI,eACrC,EAAM,KAAO,EAAM,MAIpB,EAAM,GAAG,KAAK,SAAA,GACN,OAAC,EAAM,iBAAiB,MAMhC,EAAyB,KAAK,SAAA,GACtB,OAAC,EAAM,GAAG,SAAS,IAAQ,EAAM,KAAO,GAAO,EAAM,iBAAiB,MA2BlE,SAAU,EACvB,EACA,GAEI,IAAA,EAAc,OAAO,KAAK,GAAe,IAAI,SAAA,GACzC,MAAA,CAAC,EAAM,GAAM,EAAc,MAG/B,EAAkB,IAAI,IACtB,EAA+B,KAE/B,EAA2B,SAAA,GAIxB,aAAiB,gBAIvB,EAAY,QAAQ,SAAA,GACf,IAAA,EAAW,EAAW,GACtB,EAAW,EAAW,GAEtB,EAAO,EAAgB,IAAI,GAC3B,EAA2B,GAAc,EACzC,EAAuB,EAAyB,GAEtC,EAAM,EAAO,GAWhB,EAAyB,OAAS,EAC5C,EAAgB,IAAI,EAAU,EAAyB,MAAM,KAE7D,EAAgB,OAAO,GACvB,EAAS,IAPJ,EAAM,iBAAiB,EAAM,MACjC,EAAgB,OAAO,KAUtB,GACH,aAAa,GAGd,EAAQ,WAAW,EAAgB,MAAM,KAAK,GAAkB,KAK1D,OAFP,EAAO,iBAAiB,UAAW,GAE5B,WACN,EAAO,oBAAoB,UAAW;;AC5JxC,aAFA,IAAA,EAAA,EAAA,QAAA,oBAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,EAAS,EAAA,SAAA,OAAQ,CACL,UAAA,WACV,MAAM,2DAEI,UAAA,WACV,MAAM,0DAEM,YAAA,WACZ,MAAM","file":"example.782e3159.js","sourceRoot":"../example","sourcesContent":["type KeyBindingPress = [string[], string]\n\n/**\n * A map of keybinding strings to event handlers.\n */\nexport interface KeyBindingMap {\n\t[keybinding: string]: (event: KeyboardEvent) => void\n}\n\n/**\n * These are the modifier keys that change the meaning of keybindings.\n *\n * Note: Ignoring \"AltGraph\" because it is covered by the others.\n */\nlet KEYBINDING_MODIFIER_KEYS = [\"Shift\", \"Meta\", \"Alt\", \"Control\"]\n\n/**\n * Keybinding sequences should timeout if individual key presses are more than\n * 1s apart.\n */\nlet TIMEOUT = 1000\n\n/**\n * An alias for creating platform-specific keybinding aliases.\n */\nlet MOD =\n\ttypeof navigator === \"object\" &&\n\t/Mac|iPod|iPhone|iPad/.test(navigator.platform)\n\t\t? \"Meta\"\n\t\t: \"Control\"\n\n/**\n * Parses a \"Key Binding String\" into its parts\n *\n * grammar    = `<sequence>`\n * <sequence> = `<press> <press> <press> ...`\n * <press>    = `<key>` or `<mods>+<key>`\n * <mods>     = `<mod>+<mod>+...`\n */\nfunction parse(str: string): KeyBindingPress[] {\n\treturn str\n\t\t.trim()\n\t\t.split(\" \")\n\t\t.map(press => {\n\t\t\tlet mods = press.split(\"+\")\n\t\t\tlet key = mods.pop() as string\n\t\t\tmods = mods.map(mod => (mod === \"$mod\" ? MOD : mod))\n\t\t\treturn [mods, key]\n\t\t})\n}\n\n/**\n * This tells us if a series of events matches a key binding sequence either\n * partially or exactly.\n */\nfunction match(event: KeyboardEvent, press: KeyBindingPress): boolean {\n\t// prettier-ignore\n\treturn !(\n\t\t// Allow either the `event.key` or the `event.code`\n\t\t// MDN event.key: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n\t\t// MDN event.code: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\n\t\t(\n\t\t\tpress[1].toUpperCase() !== event.key.toUpperCase() &&\n\t\t\tpress[1] !== event.code\n\t\t) ||\n\n\t\t// Ensure all the modifiers in the keybinding are pressed.\n\t\tpress[0].find(mod => {\n\t\t\treturn !event.getModifierState(mod)\n\t\t}) ||\n\n\t\t// KEYBINDING_MODIFIER_KEYS (Shift/Control/etc) change the meaning of a\n\t\t// keybinding. So if they are pressed but aren't part of the current\n\t\t// keybinding press, then we don't have a match.\n\t\tKEYBINDING_MODIFIER_KEYS.find(mod => {\n\t\t\treturn !press[0].includes(mod) && press[1] !== mod && event.getModifierState(mod)\n\t\t})\n\t)\n}\n\n/**\n * Subscribes to keybindings.\n *\n * Returns an unsubscribe method.\n *\n * @example\n * ```js\n * import keybindings from \"../src/keybindings\"\n *\n * keybindings(window, {\n * \t\"Shift+d\": () => {\n * \t\talert(\"The 'Shift' and 'd' keys were pressed at the same time\")\n * \t},\n * \t\"y e e t\": () => {\n * \t\talert(\"The keys 'y', 'e', 'e', and 't' were pressed in order\")\n * \t},\n * \t\"$mod+d\": () => {\n * \t\talert(\"Either 'Control+d' or 'Meta+d' were pressed\")\n * \t},\n * })\n * ```\n */\nexport default function keybindings(\n\ttarget: Window | HTMLElement,\n\tkeyBindingMap: KeyBindingMap,\n): () => void {\n\tlet keyBindings = Object.keys(keyBindingMap).map(key => {\n\t\treturn [parse(key), keyBindingMap[key]] as const\n\t})\n\n\tlet possibleMatches = new Map<KeyBindingPress[], KeyBindingPress[]>()\n\tlet timer: NodeJS.Timeout | null = null\n\n\tlet onKeyDown: EventListener = event => {\n\t\t// Ensure and stop any event that isn't a full keyboard event.\n\t\t// Autocomplete option navigation and selection would fire a instanceof Event,\n\t\t// instead of the expected KeyboardEvent\n\t\tif (!(event instanceof KeyboardEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\tkeyBindings.forEach(keyBinding => {\n\t\t\tlet sequence = keyBinding[0]\n\t\t\tlet callback = keyBinding[1]\n\n\t\t\tlet prev = possibleMatches.get(sequence)\n\t\t\tlet remainingExpectedPresses = prev ? prev : sequence\n\t\t\tlet currentExpectedPress = remainingExpectedPresses[0]\n\n\t\t\tlet matches = match(event, currentExpectedPress)\n\n\t\t\tif (!matches) {\n\t\t\t\t// Modifier keydown events shouldn't break sequences\n\t\t\t\t// Note: This works because:\n\t\t\t\t// - non-modifiers will always return false\n\t\t\t\t// - if the current keypress is a modifier then it will return true when we check its state\n\t\t\t\t// MDN: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState\n\t\t\t\tif (!event.getModifierState(event.key)) {\n\t\t\t\t\tpossibleMatches.delete(sequence)\n\t\t\t\t}\n\t\t\t} else if (remainingExpectedPresses.length > 1) {\n\t\t\t\tpossibleMatches.set(sequence, remainingExpectedPresses.slice(1))\n\t\t\t} else {\n\t\t\t\tpossibleMatches.delete(sequence)\n\t\t\t\tcallback(event)\n\t\t\t}\n\t\t})\n\n\t\tif (timer) {\n\t\t\tclearTimeout(timer)\n\t\t}\n\n\t\ttimer = setTimeout(possibleMatches.clear.bind(possibleMatches), TIMEOUT)\n\t}\n\n\ttarget.addEventListener(\"keydown\", onKeyDown)\n\n\treturn () => {\n\t\ttarget.removeEventListener(\"keydown\", onKeyDown)\n\t}\n}\n","import tinykeys from \"../src/tinykeys\"\n\ntinykeys(window, {\n\t\"Shift+D\": () => {\n\t\talert(\"The 'Shift' and 'd' keys were pressed at the same time\")\n\t},\n\t\"y e e t\": () => {\n\t\talert(\"The keys 'y', 'e', 'e', and 't' were pressed in order\")\n\t},\n\t\"$mod+KeyD\": () => {\n\t\talert(\"Either 'Control+d' or 'Meta+d' were pressed\")\n\t},\n})\n"]}